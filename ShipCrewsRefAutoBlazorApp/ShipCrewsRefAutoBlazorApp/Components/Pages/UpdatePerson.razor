@page "/updateperson"
@using ShipCrewsRefAutoBlazorApp.Model
@using ShipCrewsRefAutoBlazorApp.Services
@using Microsoft.AspNetCore.WebUtilities

@inject IShipCrewsService client
@inject ILogger<People> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@rendermode InteractiveServer

@implements IDisposable

<h3>Update and monitor person</h3>

Person Selector:
<input type="number" width="2" min="0" max="@upperIndex" @onchange="ChangePersonAsync" value="@index"></input>

<EditForm Model=@currentPerson OnValidSubmit=OnSubmit>
    <p>
        Updates and deletes people for use with JS example.
    </p>
    <p>
        base on https://learn.microsoft.com/en-gb/training/modules/blazor-build-rich-interactive-components/3-exercise-use-javascript-libraries-blazor-apps
    </p>
    <p>
        used to show java script and monitoring
    </p>
    <p>
        This should not use OnValidSubmit as people entered elsewhere cannot be deleted if they do not meet the local rules (eg names must be 3 or more characters)
    </p>
    <p>
        ID: <InputNumber @bind-Value=currentPerson.PersonId readonly="readonly"></InputNumber>
    </p>
    <p>
        @if (people.Any())
        {
            var isNameUnique = isNameUniqueOnServer;

            @if(isNameUnique == null)
            {
                <div class="sr-only">Checking name uniqueness...</div>
                <div class="spinner-grow text-danger" role="status">
                </div>
            }
            else{
                @if (isNameUnique.Value)
                {
                    <div>
                        Name is unique on server
                    </div>
                }
                else
                {
                    <div>
                        Name is not unique on server
                    </div>
                }
            }
        }
    </p>
    <p>
        FirstName: <InputText @bind-Value=currentPerson.FirstName></InputText>
        <ValidationMessage For="@(() => currentPerson.FirstName)" />
    </p>
    <p>
        LastName: <InputText @bind-Value=currentPerson.LastName></InputText>
        <ValidationMessage For="@(() => currentPerson.LastName)" />
    </p>
    <p>
        <h3>Role</h3>
        <InputRadioGroup Name="role" @bind-Value=currentPerson.RoleId>
            @foreach (var ro in Enum.GetValues(typeof(DummyRoles)))
            {
                int val = (int)ro;
                <label>
                    @ro:
                    <InputRadio Name="role" Value="@val"></InputRadio>
                </label>
                <br />
            }
        </InputRadioGroup>
        <ValidationMessage For="@(() => currentPerson.RoleId)" />
    </p>
    <p>
        <button type="submit" disabled=@isSubmitting 
            @onclick='() => SetButtonPressed("Update")'>
            Update
        </button>
        <button type="submit" disabled=@isSubmitting 
            @onclick='() => SetButtonPressed("Delete")'>
            Delete
        </button>
    </p>
    <ValidationSummary />
    <DataAnnotationsValidator />
</EditForm>

@code {
    private enum DummyRoles
    {
        Skipper = 1,
        RadarOperator,
        Navigator,
        NotKnownToDb
    }

    private PersonHacked[] people = { };
    private PersonWrapper currentPerson = new PersonWrapper();
    private int index = 0;
    private int upperIndex = 0;
    private bool isSubmitting = false;
    private string buttonPressed = string.Empty;
    private PeriodicTimer timer = new(TimeSpan.FromSeconds(3));
    private bool? isNameUniqueOnServer = true;

    protected override async Task OnInitializedAsync()
    {
        var res = await client.GetAllPeopleAsync();
        if (!res.IsSuccess)
        {
            JS.InvokeVoidAsync("alert", "Failed to get people");
            return;
        }

        System.Diagnostics.Debug.Assert(res.Item != null, "On success, an item must be present.");

        people = res.Item.ToArray();
        currentPerson = new PersonWrapper() { PersonHacked = people[index] };
        upperIndex = people.Count() - 1;

        Logger.LogInformation($"{OnInitializedAsync} finished", nameof(OnInitializedAsync));
    }

    protected override Task OnAfterRenderAsync(bool firstRender) =>
        firstRender ? StartPollingTimerAsync() : Task.CompletedTask;

    private void SetButtonPressed(string buttonName) => buttonPressed = buttonName;

    private async void ChangePersonAsync(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            index = 0;
            currentPerson = new PersonWrapper();
            return;
        }

        var val = e.Value as string;
        if (val == null)
        {
            index = 0;
            currentPerson = new PersonWrapper();
            return;
        }

        index = int.Parse(val as string);
        if (index <= upperIndex && index >= 0)
        {
            timer.Dispose();

            currentPerson = new PersonWrapper() { PersonHacked = people[index] };

            await UpdateNameUniqueOnServerAsync();
            await StartPollingTimerAsync();
        }
    }

    private bool IsPersonNameUnique(string firstName, string lastName, PersonHacked[] peeps)
    {
        var peps = peeps.Where(p => p.PersonId != currentPerson.PersonId);
        return !peps.Any(p => 
            string.Equals(lastName, p.LastName, StringComparison.CurrentCulture) &&
            string.Equals(firstName, p.FirstName, StringComparison.CurrentCulture) );
    }

    private async Task OnSubmit(EditContext editContext)
    {
        var isError = false;
        isSubmitting = true;
        var model = editContext.Model as PersonWrapper;
        if (model == null)
        {
            JS.InvokeVoidAsync("alert", "Failed to detect a person.");
        }
        else
        {
            if (buttonPressed == "Delete")
            {
                System.Diagnostics.Debug.Assert(model != null, "Logic above should have handled this.");

                await RemovePersonConfirmation(model.PersonHacked);
            }
            else if (buttonPressed == "Update")
            {

                System.Diagnostics.Debug.Assert(model != null, "Logic above should have handled this.");
                if (!IsPersonNameUnique(model.FirstName, model.LastName, people))
                {
                    JS.InvokeVoidAsync("alert", "Unacceptable duplicate user name.");
                    isError = true;
                }

                if (!isError)
                {
                    System.Diagnostics.Debug.Assert(model != null, "Logic above should have handled this.");
                    var res = await client.UpdatePersonAsync(model.PersonHacked);

                    // Note 201 returned due to use of attibute: [ProducesResponseType(StatusCodes.Status201Created)]
                    if (!res.IsSuccess)
                    {
                        isError = true;
                        JS.InvokeVoidAsync("alert", $"Update failed with {res.Error}.");
                    }
                }
            }

            if (isError)
            {
                var nav = $"{NavigationManager.Uri}";
                NavigationManager.NavigateTo(nav, true);
            }
        }
        isSubmitting = false;
    }

    /* using 3rd party JS lib but looks bad
    async Task RemovePersonConfirmation(PersonHacked removePerson)
        {
        var messageParams = new
        {
        title = "Remove Person?",
        text = $"""Do you want to remove "{removePerson.FirstName} {removePerson.LastName}" ?""",
    icon = "warning",
    buttons = new
    {
    abort = new { text = "No, leave them", value = false },
    confirm = new { text = "Yes, remove the person", value = true }
    },
    dangerMode = true
    };

    SimpleResponse? res = null;
        if (await JS.InvokeAsync<bool>("swal", messageParams))
            {
            res = await client.DeletePersonAsync(removePerson);
        }

        if (res != null)
        {
        if (res.IsSuccess)
        {
        var nav = $"{NavigationManager.Uri}";
        NavigationManager.NavigateTo(nav, true);
        }
        else
        {
        JS.InvokeVoidAsync("alert", $"Delete failed with {res.Error}.");
    }
    }
    }
    */

    async Task RemovePersonConfirmation(PersonHacked removePerson)
    {
        if (await JS.InvokeAsync<bool>(
            "confirm",
            $"""Do you want to remove "{removePerson.FirstName} {removePerson.LastName}" ?"""))
        {
            var res = await client.DeletePersonAsync(removePerson);

            if (res.IsSuccess)
            {
                var nav = $"{NavigationManager.Uri}";
                NavigationManager.NavigateTo(nav, true);
            }
            else
            {
                JS.InvokeVoidAsync("alert", $"Delete failed with {res.Error}.");
            }
        }
    }

    async Task UpdateNameUniqueOnServerAsync()
    {
        isNameUniqueOnServer = null;
        StateHasChanged();

        var res = await client.GetAllPeopleAsync();
        await Task.Delay(1000);
        if (!res.IsSuccess)
        {
            JS.InvokeVoidAsync("alert", "Failed to get lastest list of peeps");
            return;
        }

        System.Diagnostics.Debug.Assert(res.Item != null, "Previous code should have detected this.");
        var peeps = res.Item.ToArray();

        isNameUniqueOnServer = IsPersonNameUnique(currentPerson.FirstName, currentPerson.LastName, peeps);
        StateHasChanged();
    }

    async Task StartPollingTimerAsync()
    {
        timer.Dispose();
        timer = new(TimeSpan.FromSeconds(3));

        while (currentPerson != null && await timer.WaitForNextTickAsync())
        {
            await UpdateNameUniqueOnServerAsync();
        }
    }

    public void Dispose() => timer.Dispose();
}
