@page "/people/"
@page "/people/{specificPersonId:int?}"
@using ShipCrewsRefAutoBlazorApp.Services
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IShipCrewsService client
@inject ILogger<People> Logger

@code {
    // Simon: without this, there is no interaction (button click events). If used on the client, InteractionAuto will be required
    //@rendermode InteractiveServer

    //  With this, there are no mouse clicks
    //@rendermode InteractiveAuto
    //@rendermode InteractiveWebAssembly

}
@rendermode InteractiveServer

<PageTitle>People</PageTitle>

<h1>People</h1>
<p>This component demonstrates 
    <ul>
        <li>retrevial of data from and OpenAPI service</li>
        <li>use of an optional parameter (@nameof(SpecificPersonId))</li>
        <li>use of query string (@nameof(LastName)) - not working properly yet - server seems to see no change in people requested</li>
        <li>navigation (back to this page)</li>
        <li>text input and button click</li>
    </ul>
</p>

@if (people == null)
{
    <p><em>@message</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>PersonId</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th>RoleId</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pers in people)
            {
                <tr>
                    <td>@pers.PersonId</td>
                    <td>@pers.FirstName</td>
                    <td>@pers.LastName</td>
                    <td>@pers.RoleId</td>
                </tr>
            }
        </tbody>
    </table>
}

<p>
    <InputText @bind-Value=UserInputSpecificPersonId />
    <button @onclick="OnShowSpecificPersonClick">Show a person by ID</button>
</p>
<p>
    <InputText @bind-Value=UserSpecifiedLastName />
    <button @onclick="OnShowPeopleByLastNameClick">Show a people with last name - need more knowledge - this only seems to update on the server - rendermode</button>
</p>

@code {
        /*
        [Inject]
        private ILogger<People>? Logger { get; set; }
        */

    [Parameter]
    public int? SpecificPersonId { get; set; }

    private string? LastName { get; set; }

    private string UserInputSpecificPersonId { get; set; } = string.Empty;
    private string UserSpecifiedLastName { get; set; } = string.Empty;

    private ICollection<PersonHacked>? people;
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation(@"{OnInitializedAsync} started", nameof(OnInitializedAsync));

        message = "Loading ...";

        SetLastNameQuery();

        Task<ServiceResponse<ICollection<PersonHacked>>> res;
        if (SpecificPersonId == null) { res = GetAllPeople(); }
        else { res = GetSinglePerson(SpecificPersonId.Value); }

        var result = await res;

        if (result.IsSuccess)
        {
            System.Diagnostics.Debug.Assert(result.Item != null, "On success a value must have been set");

            if (SpecificPersonId == null && !string.IsNullOrEmpty(LastName))
            {
                people = result.Item.Where(p => p.LastName.Equals(LastName, StringComparison.InvariantCulture)).ToList();
            }
            else 
            { 
                people = result.Item;
            }

            System.Diagnostics.Debug.Assert(people != null, "Coding error. IsSuccess means the item value must have been retrieved.");
        }
        else
        {
            message = result.Error ?? "No specific error text!";
        }

        Logger.LogInformation(@"{OnInitializedAsync} finished. Nr people:{nr}, message:'{mesage}'", nameof(OnInitializedAsync), people?.Count, message);
    }

    private void SetLastNameQuery()
    {
        LastName = null;
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var keyVals = QueryHelpers.ParseQuery(uri.Query);
        var f = nameof(LastName);
        if (keyVals.TryGetValue(nameof(LastName), out var lastName))
        {
            LastName = System.Convert.ToString(lastName).Trim('"');
        }
    }

    private async Task<ServiceResponse<ICollection<PersonHacked>>> GetAllPeople()
    {
        return await client.GetAllPeopleAsync();
    }

    private async Task<ServiceResponse<ICollection<PersonHacked>>> GetSinglePerson(int id)
    {
        var res = await client.GetPersonAsync(id);

        if (res.IsSuccess)
        {
            System.Diagnostics.Debug.Assert(res.Item != null, "Success only when a person is returned");
            return new ServiceResponse<ICollection<PersonHacked>>() { Item = new List<PersonHacked>() { res.Item }};
        }
        else
        {
            return new ServiceResponse<ICollection<PersonHacked>>() { Error = res.Error };
        }
    }

    private void OnShowSpecificPersonClick()
    {
        if(!int.TryParse(UserInputSpecificPersonId, out int specVal))
        {
            people = null;
            message = $"{nameof(OnShowSpecificPersonClick)} aborted as '{UserInputSpecificPersonId}' was not recognised as an integer";
            return;
        }

        //var nav = $"{NavigationManager.BaseUri}People/1"; //  absolute
        var nav = $"/People/{specVal}"; //  relative
        NavigationManager.NavigateTo(nav);
    }

    private void OnShowPeopleByLastNameClick()
    {
        //  Does not help
        //StateHasChanged();
        //message = string.Empty;

        if (string.IsNullOrEmpty(UserSpecifiedLastName))
        {
            people = null;
            message = $"{nameof(OnShowPeopleByLastNameClick)} aborted as '{UserSpecifiedLastName}' was not specified";
            return;
        }

        //var nav = $"/People?{nameof(LastName)}=\"{UserSpecifiedLastName}\""; //  relative
        var nav = $"{NavigationManager.BaseUri}People?{nameof(LastName)}=\"{UserSpecifiedLastName}\""; //  absolute
        NavigationManager.NavigateTo(nav);
    }
}
