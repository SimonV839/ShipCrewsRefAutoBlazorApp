@page "/newpersononsubmit"
@using ShipCrewsRefAutoBlazorApp.Model
@using ShipCrewsRefAutoBlazorApp.Services
@using Microsoft.AspNetCore.WebUtilities

@inject IShipCrewsService client
@inject ILogger<People> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject LastAddedPerson LastAddedPerson

@code {
    // Simon: without this, events do not fire
}
@rendermode InteractiveServer

<h3>New Person As Per Example</h3>

<EditForm Model=@currentPerson OnSubmit="CheckSubmission">
    <p>
        Demonstrates EditForm and model binding.
    </p>
    <p>
        Creation returning the new id required the use of [ProducesResponseType(StatusCodes.Status201Created)] attibute by the referenced class.
    </p>
    <p>
        The People templated page will select the last created person by default.
    </p>
    <p>
        based on https://learn.microsoft.com/en-gb/training/modules/blazor-improve-how-forms-work/4-take-advantage-power-blazor-forms
    </p>
    <p>
        FirstName: <InputText @bind-Value=currentPerson.FirstName></InputText>
    </p>
    <p>
        LastName: <InputText @bind-Value=currentPerson.LastName></InputText>
    </p>
    <p>
        <h3>Role</h3>
        <InputRadioGroup Name="role" @bind-Value=role>
            @foreach (var ro in Enum.GetValues(typeof(DummyRoles)))
            {
                <label>
                    @ro:
                    <InputRadio Name="role" Value="@ro"></InputRadio>
                </label>
                <br />
            }
        </InputRadioGroup>
    </p>
    <p>
        <button disabled=@isSubmitting>Add</button>
        <button disabled=@isSubmitting>Any button triggers submit</button>
    </p>
</EditForm>

@code {
    private enum DummyRoles
    {
        Skipper = 1,
        RadarOperator,
        Navigator,
        NotKnownToDb
    }

    private PersonHacked[] people = { };
    private PersonHacked currentPerson = new PersonHacked();
    private DummyRoles role;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        var res = await client.GetAllPeopleAsync();
        if (!res.IsSuccess)
        {
            JS.InvokeVoidAsync("alert", "Failed to get people");
            return;
        }

        System.Diagnostics.Debug.Assert(res.Item != null, "On success, an item must be present.");

        people = res.Item.ToArray();

        Logger.LogInformation($"{OnInitializedAsync} finished", nameof(OnInitializedAsync));
    }

    private bool IsPersonNameUnique(string firstName, string lastName)
    {
        return !people.Any(p => p.LastName.Equals(lastName, StringComparison.CurrentCulture) &&
            p.FirstName.Equals(firstName, StringComparison.CurrentCulture));
    }

    private async Task CheckSubmission(EditContext editContext)
    {
        var isError = false;
        var newId = 0;
        isSubmitting = true;
        var model = editContext.Model as PersonHacked;
        if (model == null)
        {
            JS.InvokeVoidAsync("alert", "Failed to detect a person.");
        }
        else
        {
            model.RoleId = (int)role;
            isError = string.IsNullOrWhiteSpace(model?.FirstName)
                || string.IsNullOrWhiteSpace(model?.LastName)
                || model.RoleId.Value == 0;
            if (isError)
            {
                JS.InvokeVoidAsync("alert", "Unacceptable value detected.");
            }

            if (!isError)
            {
                System.Diagnostics.Debug.Assert(model != null, "Logic above should have handled this.");
                if (!IsPersonNameUnique(model.FirstName, model.LastName))
                {
                    JS.InvokeVoidAsync("alert", "Unacceptable duplicate user name.");
                    isError = true;
                }
            }

            if (!isError)
            {
                System.Diagnostics.Debug.Assert(model != null, "Logic above should have handled this.");
                var res = await client.AddPersonAsync(model);

                // Note 201 returned due to use of attibute: [ProducesResponseType(StatusCodes.Status201Created)]
                if (res.IsSuccess)
                {
                    System.Diagnostics.Debug.Assert(res.Item != null, "Code above should have handled this.");
                    newId = res.Item.PersonId;
                }
                else
                {
                    isError = true;
                    JS.InvokeVoidAsync("alert", $"Add failed with {res.Error}.");
                }
            }

            if (!isError)
            {
                //  this is used just to show the transfer of state. below a parameter is used
                //  this is used on the person pagination page
                LastAddedPerson.IdOfLastPersonAdded = newId;

                var nav = $"{NavigationManager.BaseUri}People/{newId}";
                NavigationManager.NavigateTo(nav);
            }
        }
        isSubmitting = false;
    }
}
